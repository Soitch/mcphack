import os
from dotenv import find_dotenv, load_dotenv
from langchain_gigachat import GigaChat
from langgraph.prebuilt import create_react_agent
from agentHHsearch import HeadHunterJobSearchTool 

load_dotenv(find_dotenv())
api_key = os.getenv("GIGA_API_KEY")

if not api_key:
    raise ValueError("API ключ GIGA_API_KEY не найден в переменных окружения.")

llm = GigaChat(model="GigaChat-2", top_p=0, credentials=api_key, verify_ssl_certs=False)
# Создаем экземпляр инструмента HH.ru
hh_tool = HeadHunterJobSearchTool()
# Определяем список инструментов для агента
tools = [hh_tool]

# Определяем промпт для агента. Важно четко объяснить, как использовать инструмент.
prompt_template = """Ты полезный компаньон и можешь искать актуальные вакансии на HeadHunter, а также работать с данными вакансий из файлов.
Используй инструмент `headhunter_job_search` для поиска, сохранения или чтения данных о вакансиях.

Этот инструмент имеет следующие параметры:
- `query`: поисковый запрос (например, "бухгалтер", "программист").
- `area_id`: ID региона (например, 1 для Москвы, 113 для всей России). Используй 1 для Москвы. Если регион не указан, используй 113 (вся Россия) или не указывай этот параметр.
- `pages`: количество страниц для парсинга (по умолчанию 1).
- `save_to_file`: путь к файлу CSV, если нужно сохранить результаты поиска (например, "vacancies.csv").
- `read_from_file`: путь к файлу CSV, если нужно прочитать данные вместо поиска (например, "vacancies.csv").

Примеры использования инструмента:
- Чтобы найти вакансии Python-разработчика в Москве: `headhunter_job_search(query="Python разработчик", area_id=1)`
- Чтобы найти вакансии бухгалтера во всей России и сохранить их: `headhunter_job_search(query="бухгалтер", save_to_file="accountants.csv")`
- Чтобы узнать среднюю зарплату из файла "vacancies.csv": `headhunter_job_search(read_from_file="vacancies.csv")`

Всегда предоставляй пользователю информацию, полученную от инструмента.

История переписки:
{chat_history}

Ввод пользователя: {input}
"""

agent = create_react_agent(llm, tools=tools, prompt=prompt_template)

# Тестовые запросы:

# Тестовый запрос 1: Какие вакансии есть в Москве ( area = 1) на сегодня
inputs1 = {"messages": [("user", "Какие вакансии есть в Москве на сегодня?")]}
messages1 = agent.invoke(inputs1)["messages"]
print("Ответ на запрос 1:")
print(messages1[-1].content)

print("-" * 20)

# Тестовый запрос 2: Какая средняя зарплата по позиции (бухгалтер) ?
# Для этого запроса агенту нужно сначала найти вакансии или прочитать их из файла, а затем посчитать среднюю зарплату.
# Инструмент `headhunter_job_search` теперь умеет читать из файла и считать среднюю максимальную зарплату.
# Поэтому, можно либо сначала выполнить поиск и сохранить в файл, а потом запросить среднюю зарплату из файла,
# либо модифицировать промпт или добавить логику в агент для обработки таких запросов в несколько шагов.
# Простейший способ сейчас - это использовать возможность инструмента читать из файла для расчета средней зарплаты,
# предполагая, что файл с данными уже существует или агент может его создать на предыдущем шаге.
# Для этого примера, давайте представим, что агент может выполнить поиск и сохранить данные,
# а затем вы запрашиваете среднюю зарплату. Или, если у вас есть готовый файл, агент может его прочитать.

# Пример с чтением из файла (предполагая, что файл "accountants.csv" существует)
# inputs2 = {"messages": [("user", "Какая средняя зарплата по позиции бухгалтер из файла accountants.csv?")]}
# messages2 = agent.invoke(inputs2)["messages"]
# print("Ответ на запрос 2 (из файла):")
# print(messages2[-1].content)

# Пример, где агент может сначала найти и, возможно, сохранить, а потом вы можете задать вопрос
# Агент с текущим промптом, вероятно, просто попытается использовать инструмент с запросом "средняя зарплата по позиции бухгалтер".
# Чтобы он правильно обработал это, промпт должен быть более сложным, или агент должен иметь цепочку действий.
# Для демонстрации, давайте сфокусируемся на том, как агент использует инструмент для поиска.
# Чтобы получить среднюю зарплату, агент должен сначала найти вакансии.
# Затем, если бы агент был более сложным, он бы обработал результаты и посчитал среднее.
# В текущей реализации, наш инструмент может читать из файла и считать среднюю зарплату.
# Мы можем попросить агента найти вакансии бухгалтера, сохранить их, а затем попросить посчитать среднюю зарплату из этого файла.

# Запрос 2: Поиск вакансий бухгалтера и расчет средней зарплаты (требует двух шагов или более сложной логики агента)
# Шаг 1: Найти вакансии бухгалтера и сохранить их в файл
inputs2_step1 = {"messages": [("user", "Найди вакансии Директора по персоналу с функцией обучения и сохрани их в файл recruter.csv")]}
messages2_step1 = agent.invoke(inputs2_step1)["messages"]
print("Ответ на запрос 2 (шаг 1 - поиск и сохранение):")
print(messages2_step1[-1].content)

print("-" * 20)

# Шаг 2: Прочитать файл и узнать среднюю зарплату
inputs2_step2 = {"messages": [("user", "Какая средняя максимальная зарплата по вакансиям в файле recruter.csv?")]}
messages2_step2 = agent.invoke(inputs2_step2)["messages"]
print("Ответ на запрос 2 (шаг 2 - чтение и расчет):")
print(messages2_step2[-1].content)