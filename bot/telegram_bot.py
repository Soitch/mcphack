#telegram_bot.py

import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from fastmcp import Client
from config import Config
from models.schemas import VacancyRequest
import asyncio

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.bot = Bot(token=Config.BOT_TOKEN)
        self.dp = Dispatcher()
        self.mcp_client = Client(f"http://{Config.MCP_HOST}:{Config.MCP_PORT}")
        
        self.dp.message(Command("start"))(self.start_handler)
        self.dp.message(Command("search"))(self.search_handler)
        self.dp.message(Command("status"))(self.status_handler)

    async def connect_to_mcp(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP-—Å–µ—Ä–≤–µ—Ä—É"""
        max_retries = 5
        for i in range(max_retries):
            try:
                await self.mcp_client.connect()
                logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP-—Å–µ—Ä–≤–µ—Ä—É")
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP ({i+1}/{max_retries}): {e}")
                await asyncio.sleep(2)
        return False

    async def start_handler(self, message: types.Message):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å HH.ru\n\n"
            "üîç –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n"
            "/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
        )

    async def search_handler(self, message: types.Message):
        query = message.text.split(maxsplit=1)
        if len(query) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n"
                                "–ü—Ä–∏–º–µ—Ä: /search python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
            return
        
        await message.answer(f"üîç –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query[1]}...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ MCP-—Å–µ—Ä–≤–µ—Ä
            request = VacancyRequest(
                query=query[1],
                user_id=message.from_user.id
            )
            
            # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —á–µ—Ä–µ–∑ MCP Client
            response = await self.mcp_client.call(
                "handle_request",
                **request.model_dump()
            )
            
            for vacancy in response.get("vacancies", []):
                await message.answer(
                    f"üè¢ <b>{vacancy.get('title', '–í–∞–∫–∞–Ω—Å–∏—è')}</b>\n"
                    f"üë®‚Äçüíº –ö–æ–º–ø–∞–Ω–∏—è: {vacancy.get('company', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"üîó <a href='{vacancy.get('url', '#')}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>",
                    parse_mode="HTML"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", exc_info=True)
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π")

    async def status_handler(self, message: types.Message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            status = await self.mcp_client.call("get_status")
            await message.answer(
                f"üü¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                f"‚è± Uptime: {status.get('uptime', 0)} —Å–µ–∫\n"
                f"ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {status.get('active_agents', 0)}\n"
                f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {status.get('queue_size', 0)}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not await self.connect_to_mcp():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP-—Å–µ—Ä–≤–µ—Ä—É. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
        
        await self.dp.start_polling(self.bot)