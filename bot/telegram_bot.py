import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import Config
from common.models import VacancyRequest
from fastmcp import MCPClient
import asyncio

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.bot = Bot(token=Config.BOT_TOKEN)
        self.dp = Dispatcher()
        self.mcp_client = MCPClient(f"http://{Config.MCP_HOST}:{Config.MCP_PORT}")
        self.user_states = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message(Command("start"))(self.start_handler)
        self.dp.message(Command("search"))(self.search_handler)
        self.dp.message(Command("status"))(self.status_handler)
        self.dp.message(F.text)(self.text_handler)

    async def connect_to_mcp(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP-—Å–µ—Ä–≤–µ—Ä—É"""
        max_retries = 5
        for i in range(max_retries):
            try:
                await self.mcp_client.connect()
                logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP-—Å–µ—Ä–≤–µ—Ä—É")
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP ({i+1}/{max_retries}): {e}")
                await asyncio.sleep(2)
        return False

    async def start_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å HH.ru\n\n"
            "üîç –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n"
            "/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
        )

    async def status_handler(self, message: types.Message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            status = await self.mcp_client.models.vacancy_manager.get_status()
            await message.answer(f"üü¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                                f"üîÅ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {status['active_agents']}\n"
                                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {status['processed_requests']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await message.answer("üî¥ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")

    async def search_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search"""
        query = message.text.split(maxsplit=1)
        if len(query) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n"
                                "–ü—Ä–∏–º–µ—Ä: /search python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
            return
        
        await self.process_search(message.from_user.id, query[1], message)

    async def text_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if message.text.startswith('/'):
            return
            
        await self.process_search(message.from_user.id, message.text, message)

    async def process_search(self, user_id: int, query: str, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await message.answer(f"üîç –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ MCP
            request = VacancyRequest(
                query=query,
                user_id=user_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ MCP-—Å–µ—Ä–≤–µ—Ä
            response = await self.mcp_client.models.vacancy_manager.handle_request(request)
            
            if not response.vacancies:
                await loading_msg.edit_text("üòï –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await loading_msg.delete()
            for vacancy in response.vacancies:
                await self.send_vacancy_message(message, vacancy)
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await loading_msg.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π")

    async def send_vacancy_message(self, message: types.Message, vacancy: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π"""
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üìÑ –û—Ç–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é",
            url=vacancy.get('url', 'https://hh.ru')
        ))
        
        salary = vacancy.get('salary')
        if not salary or salary.lower() == '–Ω–µ —É–∫–∞–∑–∞–Ω–∞':
            salary_text = "‚ÑπÔ∏è –ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        else:
            salary_text = f"üí∞ {salary}"
        
        text = (
            f"üè¢ <b>{vacancy.get('title', '–í–∞–∫–∞–Ω—Å–∏—è')}</b>\n"
            f"üë®‚Äçüíº –ö–æ–º–ø–∞–Ω–∏—è: {vacancy.get('company', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"{salary_text}\n"
            f"üìå {vacancy.get('description', '')}\n"
            f"üìç {vacancy.get('address', '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
        )
        
        await message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not await self.connect_to_mcp():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP-—Å–µ—Ä–≤–µ—Ä—É. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
        
        await self.dp.start_polling(self.bot)