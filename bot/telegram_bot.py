#telegram_bot.py

import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import Config
import asyncio
import aiohttp
import json

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.bot = Bot(token=Config.BOT_TOKEN)
        self.dp = Dispatcher()
        
        self.dp.message(Command("start"))(self.start_handler)
        self.dp.message(Command("search"))(self.search_handler)
        self.dp.message(Command("status"))(self.status_handler)
        self.dp.message(Command("help"))(self.help_handler)

    async def start_handler(self, message: types.Message):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å HH.ru\n\n"
            "üîç –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n"
            "/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "/help - –ø–æ–º–æ—â—å"
        )

    async def help_handler(self, message: types.Message):
        await message.answer(
            "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n"
            "–ü—Ä–∏–º–µ—Ä: /search python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n\n"
            "/status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )

    async def search_handler(self, message: types.Message):
        query = message.text.split(maxsplit=1)
        if len(query) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n"
                                "–ü—Ä–∏–º–µ—Ä: /search python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
            return
        
        await message.answer(f"üîç –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query[1]}...")
        
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±–µ–∑ MCP
            vacancies = [
                {
                    "title": "Python Developer",
                    "company": "–¢–µ—Ö–Ω–æ–õ–æ–≥–∏–∫–∞",
                    "salary": "150 000 - 200 000 —Ä—É–±.",
                    "url": "https://hh.ru/vacancy/12345",
                    "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ backend –Ω–∞ Python"
                },
                {
                    "title": "Data Scientist",
                    "company": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞–ü—Ä–æ",
                    "salary": "180 000 - 250 000 —Ä—É–±.",
                    "url": "https://hh.ru/vacancy/67890",
                    "description": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
                }
            ]
            
            for vacancy in vacancies:
                await message.answer(
                    f"üè¢ <b>{vacancy['title']}</b>\n"
                    f"üë®‚Äçüíº –ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company']}\n"
                    f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary']}\n"
                    f"üìù {vacancy['description']}\n"
                    f"üîó <a href='{vacancy['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>",
                    parse_mode="HTML"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", exc_info=True)
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π")

    async def status_handler(self, message: types.Message):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        await message.answer(
            "üü† –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ\n\n"
            "MCP —Å–µ—Ä–≤–µ—Ä: –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω\n"
            "–ê–≥–µ–Ω—Ç—ã: –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã\n"
            "–†–µ–∂–∏–º: —Ç–µ—Å—Ç–æ–≤—ã–π\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"
        )

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        await self.dp.start_polling(self.bot)